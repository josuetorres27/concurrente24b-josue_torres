define MAX_PATH_LENGTH 260

procedure format_time(seconds, text, capacity)
  gmt = gmtime(seconds)
  snprintf(text, capacity, "%04d/%02d/%02d\t%02d:%02d:%02d", gmt.tm_year +
    1900, gmt.tm_mon + 1, gmt.tm_mday, gmt.tm_hour, gmt.tm_min, gmt.tm_sec)
  return text
end procedure

procedure read_dimensions(filepath, rows, cols)
  file = fopen(filepath, "rb")
  if file == NULL:
    print "Error opening the plate file"
    exit(EXIT_FAILURE)
  end if

  if fread(rows, sizeof(long long int), 1, file) != 1:
    print "Error reading plate dimensions"
    fclose(file)
    exit(EXIT_FAILURE)
  end if

  if fread(cols, sizeof(long long int), 1, file) != 1:
    print "Error reading plate dimensions"
    fclose(file)
    exit(EXIT_FAILURE)
  end if

  fclose(file)
end procedure

procedure read_plate(filepath, rows, cols, plate)
  file = fopen(filepath, "rb")
  if file == NULL:
    print "Error opening the plate file"
    exit(EXIT_FAILURE)
  end if

  fseek(file, 2 * sizeof(long long int), SEEK_SET)

  for i = 0 to rows - 1:
    if fread(plate[i], sizeof(double), cols, file) != cols:
      print "Error reading plate data"
      fclose(file)
      exit(EXIT_FAILURE)
    end if
  end for

  fclose(file)
end procedure

procedure simulate(plate, rows, cols, delta_t, alpha, h, epsilon, k,
  time_seconds)
  max_delta = 0.0
  next_plate = allocate memory for rows arrays of double

  for i = 0 to rows - 1:
    next_plate[i] = allocate memory for cols doubles
  end for

  k = 0
  time_seconds = 0

  do:
    max_delta = 0.0
    for i = 1 to rows - 2:
      for j = 1 to cols - 2:
        next_plate[i][j] = plate[i][j] + ((delta_t * alpha) / (h * h)) *
          (plate[i-1][j] + plate[i+1][j] + plate[i][j-1] + plate[i][j+1] -
            (4 * plate[i][j]))

        delta = abs(next_plate[i][j] - plate[i][j])
        if delta > max_delta
          max_delta = delta
        end if
      end for
    end for

    for i = 1 to rows - 2:
      for j = 1 to cols - 2:
        plate[i][j] = next_plate[i][j]
      end for
    end for

    k = k + 1
    time_seconds = time_seconds + delta_t

  while max_delta > epsilon

  for i = 0 to rows - 1:
    free(next_plate[i])
  end for
  free(next_plate)
end procedure