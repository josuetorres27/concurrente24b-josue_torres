define MAX_PATH_LENGTH = 260

procedure format_time(seconds, text, capacity)
  define gmt = gmtime(seconds)
  text = "Formatted date and time string"
  return text
end procedure

procedure read_dimensions(filepath, rows, cols)
  define file = open filepath
  if file == NULL:
    print "Error opening the plate file"
    return EXIT_FAILURE
  end if

  read rows from file
  if error_occurred:
    print "Error reading plate dimensions"
    close file
    return EXIT_FAILURE
  end if

  read cols from file
  if error_occurred:
    print "Error reading plate dimensions"
    close file
    return EXIT_FAILURE
  end if

  close file
end procedure

procedure read_plate(filepath, rows, cols, plate)
  define file = open filepath
  if file == NULL:
    print "Error opening the plate file"
    return EXIT_FAILURE
  end if

  move file pointer to position 2 * size_of(long long int) from start of file

  for i = 0 to rows - 1:
    read a row of plate data from file into plate[i]
    if error_occurred:
      print "Error reading plate data"
      close file
      return EXIT_FAILURE
    end if
  end for

  close file
end procedure

procedure simulate(plate, rows, cols, delta_t, alpha, h, epsilon, k,
  time_seconds)
  define max_delta = 0.0
  define next_plate = allocate memory for rows arrays of double

  for i = 0 to rows - 1:
    next_plate[i] = allocate memory for cols doubles
  end for

  k = 0
  time_seconds = 0

  do:
    max_delta = 0.0
    for i = 1 to rows - 2:
      for j = 1 to cols - 2:
        next_plate[i][j] = new temperature formula

        define delta as absolute value of (next_plate[i][j] - plate[i][j])
        if delta > max_delta:
          max_delta = delta
        end if
      end for
    end for

    for i = 1 to rows - 2:
      for j = 1 to cols - 2:
        plate[i][j] = next_plate[i][j]
      end for
    end for

    k = k + 1
    time_seconds = time_seconds + delta_t

  while max_delta > epsilon

  for i = 0 to rows - 1:
    free next_plate[i]
  end for
  free next_plate
end procedure

procedure write_plate(filepath, rows, cols, plate)
  define file = open filepath
  if file == NULL:
    print "Error opening the output file"
    return EXIT_FAILURE
  end if

  write rows to file
  write cols to file

  for i = 0 to rows - 1:
    write a row of plate data to file
  end for

  close file
end procedure

procedure create_report(job_file, plate_filename, delta_t, alpha, h, epsilon,
  k, time_seconds)
  define report_filename as job_file with ".tsv" appended

  report_file = fopen(report_filename, "a")
  if report_file == NULL:
    print "Error opening the report file"
    return EXIT_FAILURE
  end if

  define formatted_time = allocate memory for 48 bytes
  format_time

  write plate_filename, delta_t, alpha, h, epsilon, k, and formatted_time to 
    report_file

  close report_file
end procedure

procedure main(argc, argv)
  if argc < 2 or argc > 4:
    print "Usage: <job file> [thread count] [file directory]"
    return 1
  end if

  define job_file = argv[1]
  define num_threads as if argc >= 3 then convert argv[2] to integer else 1
  define dir_prefix as if argc == 4 then argv[3] else "."

  define file = open job_file
  if file == NULL:
    print "Error opening the job file"
    return 1
  end if

  variable double delta_t, alpha, h, epsilon;

  while read from file and store in plate_filename, delta_t, alpha, h,
    epsilon == 5:
    define filepath = dir_prefix + "/" + plate_filename

    variable long long int rows, cols
    read plate dimensions

    define plate = allocate memory for rows arrays of double
    for i = 0 to rows - 1:
      plate[i] = allocate memory for cols doubles
    end for

    read plate

    variable int k
    variable time_t time_seconds

    start simulation

    create simulation report

    define output_filename = "plate" + plate_filename + "-" + k + ".bin"

    write plate

    for i = 0 to rows - 1:
      free plate[i]
    end for
    free plate
  end while

  close file
  return 0
end procedure