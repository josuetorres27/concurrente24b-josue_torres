procedure main()
  declare shared thread_count := 10 // Cantidad de hilos a crear
  // Crear hilos y obtener el arreglo de datos privados
  declare team := create_threads(thread_count, routine)

  if team != NULL:
    join_threads(thread_count, team) // Esperar a que todos los hilos terminen
  end if
end procedure

procedure routine(private_data)
  declare data := convert private_data to private_data_structure
  print "I am thread ", data.thread_number, " of ", data.thread_count
end procedure

procedure create_threads(thread_count, routine)
  declare private_data_array := new array of private_data_structure
    with size thread_count

  if private_data_array:
    for index from 0 to (thread_count - 1):
      // Asignar n√∫mero de hilo
      private_data_array[index].thread_number := index
      // Asignar cantidad total de hilos
      private_data_array[index].thread_count := thread_count
      private_data_array[index].shared_data := data

      // Crear hilo y asignar la rutina con datos privados
      declare error := create_thread(private_data_array[index].thread_id,
        routine, &private_data_array[index])

      if error != 0:
        print "Error: could not create thread ", index
        join_threads(index, private_data_array) // Limpieza en caso de error
        return NULL
      end if
    end for
  end if

  return private_data_array // Retornar el arreglo de datos privados de hilos
end procedure

procedure join_threads(thread_count, private_data_array)
  declare error_count := 0 // Contador de errores al hacer join

  for index from 0 to (thread_count - 1):
    declare error := join_thread(private_data_array[index].thread_id)

    if error:
      print "Error: could not join thread ", index
      error_count++
    end if
  end for
  // Liberar memoria del arreglo de datos privados
  free_memory(private_data_array)
  return error_count // Retornar la cantidad de errores al hacer join
end procedure